generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String           @id @default(cuid())
  name            String?
  email           String?          @unique
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
  trainings       Training[]
  exerciseDetails ExerciseDetail[]
}

model Training {
  id          String     @id @default(cuid())
  title       String
  description String?
  date        DateTime   @db.Date
  hourStart   String
  hourEnd     String
  exercises   Exercise[]

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

model Exercise {
  id     String  @id @default(cuid())
  series Serie[]

  exerciseDetail   ExerciseDetail @relation(fields: [exerciseDetailId], references: [id])
  exerciseDetailId String

  training   Training @relation(fields: [trainingId], references: [id], onDelete: Cascade)
  trainingId String
}

model ExerciseDetail {
  id             String     @id @default(cuid())
  name           String
  avatarUrl      String?
  avatarFallback String
  exercises      Exercise[]

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

model Serie {
  id        String @id @default(cuid())
  reps      Int
  weight    Float?
  breakTime String

  exercise   Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  exerciseId String
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
